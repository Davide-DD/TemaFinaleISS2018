System cleaningRobotAnalisiRequisiti3

Dispatch consoleMsg : consoleMsg( DATA )
Dispatch timeMsg : timeMsg( VALUE )
Dispatch tempMsg : tempMsg( VALUE )

Event environmentalEventViolation : environmentalEventViolation( REASON )
Event timeEvent : timeEvent( VALUE )
Event tempEvent : tempEvent( VALUE )
Event collisionEvent : collisionEvent(COLLISION)

Context consoleCtx3 ip [ host="localhost"  port=8019 ] -g cyan
Context robotCtx3 ip [ host="localhost"  port=8021 ] -g yellow -httpserver

QActor qaconsole3 context consoleCtx3 {
	Plan init normal [ 
		println("CONSOLE: acceso");
		delay 1000;
		println("CONSOLE: mando start");
		// ASSUNZIONE DA ANALISTA:
		// il comando start viene inviato solo quando le condizioni
		// non sono violate, noi per ipotesi imponiamo che non lo siano
		forward qarobot3 -m consoleMsg : consoleMsg("start")
	] /*switchTo putOnHold
	
	Plan putOnHold [] finally repeatPlan*/
}

QActor qaenvironment context robotCtx3 {
	Plan init normal [
		println("ENVIRONMENT: simulo controllo di tempo e temperatura e invio eventi di interruzione a causa di violazione delle precondizioni");
		delay 8000;
		println("ENVIRONMENT: invio temperatura non valida");
		emit tempEvent : tempEvent(43)
		//forward qabusinesslogic -m tempMsg : tempMsg(43)
	]
}

QActor qabusinesslogic context robotCtx3 {
	Rules {
		
		systemmodel( name(application), value(off) ).
		switchSystemState(on) :-
			systemmodel( name(application), value(off) ),
			replaceRule( systemmodel( NAME, value(off) ), systemmodel( NAME, value(on) ) ), !.
		switchSystemState(off) :-
			systemmodel( name(application), value(on) ),
			replaceRule( systemmodel( NAME, value(on) ), systemmodel( NAME, value(off) ) ), !.
		
		eval(ge, X, X).
		eval(ge, X, V) :- eval(gt, X, V).
		
		curTemperatureValue(10).
		curTimeValue(7).
		
		evalTemperature(cold) :-
			curTemperatureValue(V),
			eval(lt, V, 25).
		evalTemperature(hot) :-
			curTemperatureValue(V),
			eval(ge, V, 25), !.
			
		evalTime(good) :-
			curTimeValue(V),
			output(curTimeValue(V)),
			eval(ge, V, 7),
			eval(lt, V, 11), !.	
	}
	
	Plan init normal [
		
	] transition stopAfter 30000000
     	whenEvent timeEvent -> handleEnvEvent,
     	whenEvent tempEvent -> handleEnvEvent
     finally repeatPlan
     	
    
    Plan handleEnvEvent resumeLastPlan [
    	printCurrentEvent;
    	onEvent timeEvent : timeEvent(V) -> ReplaceRule curTimeValue(X) with curTimeValue(V);
    	onEvent tempEvent : tempEvent(V) -> ReplaceRule curTemperatureValue(X) with curTemperatureValue(V);
    	[!? evalTime(good)] {
    		println("GOOD time range, doing nothing.");
    		[!? evalTemperature(cold)] {
				println("Temperature is nice, doing nothing.");
				addRule rTempAndTimeOk // TEST PURPOSES
			} else {
				println("Temperature too hot, stopping everything.");
				emit environmentalEventViolation : environmentalEventViolation( "bad_temp" );
				addRule rTempKo // TEST PURPOSES
			}
		} else {
			println("BAD time range, stopping everything.");
			emit environmentalEventViolation : environmentalEventViolation( "bad_time" );
			addRule rTimeKo // TEST PURPOSES
		}
    ]
}

QActor qaproximitysensor context robotCtx3 {
	Plan init normal [
		/*println("SENSORE SUL ROBOT: simulo la rilevazione di collisioni");
		delay 8000;
		emit collisionEvent : collisionEvent(collision)*/
	]
}

QActor qarobot3 context robotCtx3 {

	Plan init normal [
		println("ROBOT: in attesa di comandi dalla console o eventi di interruzione")
	] switchTo waitForCommands
	
	Plan waitForCommands [
	] transition stopAfter 30000000  
     	whenMsg consoleMsg -> handleConsoleMsg,
     	whenEvent environmentalEventViolation -> handleEnvironmentalEvent,
     	whenEvent collisionEvent -> handleCollisionEvent 
    finally repeatPlan
    
    Plan handleConsoleMsg resumeLastPlan [
    	onMsg consoleMsg : consoleMsg("start") -> {
    		addRule rStart;
    		println("ROBOT: acceso da comando console")
    	};
    	onMsg consoleMsg : consoleMsg("stop") -> {
    		addRule rStop;
    		println("ROBOT: spento da comando console")
    	}
    ]
    
    Plan handleEnvironmentalEvent resumeLastPlan [
    	onEvent environmentalEventViolation : environmentalEventViolation("bad_temp") -> {
    		//addRule rStop;
    		println("ROBOT: spento a causa di violazione condizioni di temperatura")
    	};
    	onEvent environmentalEventViolation : environmentalEventViolation("bad_time") -> {
    		//addRule rStop;
    		println("ROBOT: spento a causa di violazione condizioni di tempo")
    	}
    ]
    
    Plan handleCollisionEvent resumeLastPlan [
    	println("ROBOT: collisione rilevata dal sensore, per capire se è mobile aspetto un po', e se non ricevo più collisioni allora lo è");
    	println("ROBOT: temporaneamente fermo per collisione");
    	delay 700;
    	println("ROBOT: riprendo ad andare, dopo la collisione")
    	
    ]
}