System testSelfMsg

Dispatch thoughtMsg : thought(SENDER, DATA)
Event finished : finished(DATA)

Context ctxTest ip [ host="localhost"  port=8019 ] -g cyan

QActor qamockmsgsender context ctxTest {
	Plan init normal [
		delay 2000;
		forward qaselfmsg -m thoughtMsg : thought(mind, data(sorbetti));
		delay 2000;
		forward qaselfmsg -m thoughtMsg : thought(mind, "error")
	]
}

QActor qaselfmsg context ctxTest {
	Plan init normal [
		println("Test per i selfMsg, ci si prova")
	] switchTo waitForCommands
	
	Plan waitForCommands [
		
	] transition stopAfter 30000000 
     	whenMsg thoughtMsg : thought(mind, DATA) do {
     		onMsg thoughtMsg : thought(mind, "finished") ->
     			emit finished : finished("finishedCleaning");
     		onMsg thoughtMsg : thought(mind, "cantfinish") ->
     			emit finished : finished("cantFinish");
     		onMsg thoughtMsg : thought(mind, "error") ->
     			emit finished : finished("cantFinish");
     		onMsg thoughtMsg : thought(mind, data(INSIDEDATA)) ->
     			println(data(INSIDEDATA)) },
     	whenEvent finished -> handleFinished
     	finally repeatPlan
     	
    Plan handleFinished resumeLastPlan [
    	onEvent finished : finished("cantFinish") -> println("Terminato a causa di ostacolo invalicabile");
    	onEvent finished : finished("finishedCleaning") -> println("Terminato per stanza pulita correttamente");
    	println("Test concluso con successo");
    	delay 2000
    ]
}