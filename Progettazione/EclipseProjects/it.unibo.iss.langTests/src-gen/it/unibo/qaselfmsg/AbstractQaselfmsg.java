/* Generated by AN DISI Unibo */ 
package it.unibo.qaselfmsg;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractQaselfmsg extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractQaselfmsg(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/qaselfmsg/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/qaselfmsg/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("waitForCommands",waitForCommands);
	    	stateTab.put("handleFinished",handleFinished);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "qaselfmsg tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	temporaryStr = "\"Test per i selfMsg, ci si prova\"";
	    	println( temporaryStr );  
	    	//switchTo waitForCommands
	        switchToPlanAsNextState(pr, myselfName, "qaselfmsg_"+myselfName, 
	              "waitForCommands",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun waitForCommands = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_waitForCommands",0);
	     pr.incNumIter(); 	
	    	String myselfName = "waitForCommands";  
	    	//bbb
	     msgTransition( pr,myselfName,"qaselfmsg_"+myselfName,false,
	          new StateFun[]{() -> {	//AD HOC state to execute an action and resumeLastPlan
	          try{
	            PlanRepeat pr1 = PlanRepeat.setUp("adhocstate",-1);
	            //ActionSwitch for a message or event
	             if( currentMessage.msgContent().startsWith("thought") ){
	            	//println("WARNING: variable substitution not yet fully implemented " ); 
	            	{//actionseq
	            	//onMsg 
	            	setCurrentMsgFromStore(); 
	            	curT = Term.createTerm("thought(mind,\"finished\")");
	            	if( currentMessage != null && currentMessage.msgId().equals("thoughtMsg") && 
	            		pengine.unify(curT, Term.createTerm("thought(SENDER,DATA)")) && 
	            		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	            		String parg="finished(\"finishedCleaning\")";
	            		/* RaiseEvent */
	            		parg = updateVars(Term.createTerm("thought(SENDER,DATA)"),  Term.createTerm("thought(mind,\"finished\")"), 
	            			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	            		if( parg != null ) emit( "finished", parg );
	            	}
	            	//onMsg 
	            	setCurrentMsgFromStore(); 
	            	curT = Term.createTerm("thought(mind,\"cantfinish\")");
	            	if( currentMessage != null && currentMessage.msgId().equals("thoughtMsg") && 
	            		pengine.unify(curT, Term.createTerm("thought(SENDER,DATA)")) && 
	            		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	            		String parg="finished(\"cantFinish\")";
	            		/* RaiseEvent */
	            		parg = updateVars(Term.createTerm("thought(SENDER,DATA)"),  Term.createTerm("thought(mind,\"cantfinish\")"), 
	            			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	            		if( parg != null ) emit( "finished", parg );
	            	}
	            	//onMsg 
	            	setCurrentMsgFromStore(); 
	            	curT = Term.createTerm("thought(mind,\"error\")");
	            	if( currentMessage != null && currentMessage.msgId().equals("thoughtMsg") && 
	            		pengine.unify(curT, Term.createTerm("thought(SENDER,DATA)")) && 
	            		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	            		String parg="finished(\"cantFinish\")";
	            		/* RaiseEvent */
	            		parg = updateVars(Term.createTerm("thought(SENDER,DATA)"),  Term.createTerm("thought(mind,\"error\")"), 
	            			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	            		if( parg != null ) emit( "finished", parg );
	            	}
	            	//onMsg 
	            	setCurrentMsgFromStore(); 
	            	curT = Term.createTerm("thought(mind,data(INSIDEDATA))");
	            	if( currentMessage != null && currentMessage.msgId().equals("thoughtMsg") && 
	            		pengine.unify(curT, Term.createTerm("thought(SENDER,DATA)")) && 
	            		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	            		String parg = "data(INSIDEDATA)";
	            		/* Print */
	            		parg =  updateVars( Term.createTerm("thought(SENDER,DATA)"), 
	            		                    Term.createTerm("thought(mind,data(INSIDEDATA))"), 
	            			    		  	Term.createTerm(currentMessage.msgContent()), parg);
	            		if( parg != null ) println( parg );
	            	}
	            	};//actionseq
	             }
	            repeatPlanNoTransition(pr1,"adhocstate","adhocstate",false,true);
	          }catch(Exception e ){  
	             println( getName() + " plan=waitForCommands WARNING:" + e.getMessage() );
	             //QActorContext.terminateQActorSystem(this); 
	          }
	          },
	           stateTab.get("handleFinished") }, 
	          new String[]{"true","M","thoughtMsg", "true","E","finished" },
	          30000000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitForCommands){  
	    	 println( getName() + " plan=waitForCommands WARNING:" + e_waitForCommands.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitForCommands
	    
	    StateFun handleFinished = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleFinished",-1);
	    	String myselfName = "handleFinished";  
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("finished(\"cantFinish\")");
	    	if( currentEvent != null && currentEvent.getEventId().equals("finished") && 
	    		pengine.unify(curT, Term.createTerm("finished(DATA)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg = "\"Terminato a causa di ostacolo invalicabile\"";
	    			/* Print */
	    			parg =  updateVars( Term.createTerm("finished(DATA)"), 
	    			                    Term.createTerm("finished(\"cantFinish\")"), 
	    				    		  	Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) println( parg );
	    	}
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("finished(\"finishedCleaning\")");
	    	if( currentEvent != null && currentEvent.getEventId().equals("finished") && 
	    		pengine.unify(curT, Term.createTerm("finished(DATA)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg = "\"Terminato per stanza pulita correttamente\"";
	    			/* Print */
	    			parg =  updateVars( Term.createTerm("finished(DATA)"), 
	    			                    Term.createTerm("finished(\"finishedCleaning\")"), 
	    				    		  	Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) println( parg );
	    	}
	    	temporaryStr = "\"Test concluso con successo\"";
	    	println( temporaryStr );  
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(2000,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "handleFinished";
	    	if( ! aar.getGoon() ) return ;
	    	repeatPlanNoTransition(pr,myselfName,"qaselfmsg_"+myselfName,false,true);
	    }catch(Exception e_handleFinished){  
	    	 println( getName() + " plan=handleFinished WARNING:" + e_handleFinished.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleFinished
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
