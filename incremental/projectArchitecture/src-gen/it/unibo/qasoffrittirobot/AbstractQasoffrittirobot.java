/* Generated by AN DISI Unibo */ 
package it.unibo.qasoffrittirobot;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractQasoffrittirobot extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractQasoffrittirobot(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/qasoffrittirobot/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/qasoffrittirobot/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("waitForFrontendActivation",waitForFrontendActivation);
	    	stateTab.put("waitForCommand",waitForCommand);
	    	stateTab.put("handleCmd",handleCmd);
	    	stateTab.put("waitForRobotResponse",waitForRobotResponse);
	    	stateTab.put("robotResponse",robotResponse);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "qasoffrittirobot tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	temporaryStr = "qasoffrittirobot(starts)";
	    	println( temporaryStr );  
	    	//switchTo waitForFrontendActivation
	        switchToPlanAsNextState(pr, myselfName, "qasoffrittirobot_"+myselfName, 
	              "waitForFrontendActivation",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun waitForFrontendActivation = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_waitForFrontendActivation",0);
	     pr.incNumIter(); 	
	    	String myselfName = "waitForFrontendActivation";  
	    	temporaryStr = "\"Waiting for robot to be ready\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"qasoffrittirobot_"+myselfName,false,
	          new StateFun[]{stateTab.get("waitForCommand") }, 
	          new String[]{"true","E","robotAnswerMid" },
	          30000000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitForFrontendActivation){  
	    	 println( getName() + " plan=waitForFrontendActivation WARNING:" + e_waitForFrontendActivation.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitForFrontendActivation
	    
	    StateFun waitForCommand = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("waitForCommand",-1);
	    	String myselfName = "waitForCommand";  
	    	temporaryStr = "\"Robot is ready\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"qasoffrittirobot_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleCmd") }, 
	          new String[]{"true","M","robotCmd" },
	          100000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitForCommand){  
	    	 println( getName() + " plan=waitForCommand WARNING:" + e_waitForCommand.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitForCommand
	    
	    StateFun handleCmd = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleCmd",-1);
	    	String myselfName = "handleCmd";  
	    	temporaryStr = "\"ROBOT SOFFRITTI: Plan handleCmd\"";
	    	println( temporaryStr );  
	    	printCurrentMessage(false);
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("robotCmd(buslog,V)");
	    	if( currentMessage != null && currentMessage.msgId().equals("robotCmd") && 
	    		pengine.unify(curT, Term.createTerm("robotCmd(SENDER,CMD)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg= currentMessage.msgContent();   
	    		/* AlienAnswerMove */
	    		parg = updateVars(Term.createTerm("robotCmd(SENDER,CMD)"),  Term.createTerm("robotCmd(buslog,V)"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null )  sendAnswerToServer( "qamiddleware_ctrl", parg );
	    	}
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"directionReceived(CODE)","directionReceived(ok)", guardVars ).toString();
	    	sendMsg("directionReceived","qabusinesslogicproban", QActorContext.dispatch, temporaryStr ); 
	    	//switchTo waitForRobotResponse
	        switchToPlanAsNextState(pr, myselfName, "qasoffrittirobot_"+myselfName, 
	              "waitForRobotResponse",false, false, null); 
	    }catch(Exception e_handleCmd){  
	    	 println( getName() + " plan=handleCmd WARNING:" + e_handleCmd.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleCmd
	    
	    StateFun waitForRobotResponse = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("waitForRobotResponse",-1);
	    	String myselfName = "waitForRobotResponse";  
	    	temporaryStr = "\"ROBOT SOFFRITTI: let's see what's in front of me...\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"qasoffrittirobot_"+myselfName,false,
	          new StateFun[]{stateTab.get("robotResponse") }, 
	          new String[]{"true","E","robotAnswerMid" },
	          100000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitForRobotResponse){  
	    	 println( getName() + " plan=waitForRobotResponse WARNING:" + e_waitForRobotResponse.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitForRobotResponse
	    
	    StateFun robotResponse = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("robotResponse",-1);
	    	String myselfName = "robotResponse";  
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("robotAnswerMid(\"clear\")");
	    	if( currentEvent != null && currentEvent.getEventId().equals("robotAnswerMid") && 
	    		pengine.unify(curT, Term.createTerm("robotAnswerMid(VALUE)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			//println("WARNING: variable substitution not yet fully implemented " ); 
	    			{//actionseq
	    			temporaryStr = "\"Il campo � libero, informo la business logic.\"";
	    			println( temporaryStr );  
	    			temporaryStr = QActorUtils.unifyMsgContent(pengine,"robotAnswer(VALUE)","robotAnswer(\"clear\")", guardVars ).toString();
	    			sendMsg("robotAnswer","qabusinesslogicproban", QActorContext.dispatch, temporaryStr ); 
	    			};//actionseq
	    	}
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("robotAnswerMid(\"obstacle\")");
	    	if( currentEvent != null && currentEvent.getEventId().equals("robotAnswerMid") && 
	    		pengine.unify(curT, Term.createTerm("robotAnswerMid(VALUE)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			//println("WARNING: variable substitution not yet fully implemented " ); 
	    			{//actionseq
	    			temporaryStr = "\"C'� un ostacolo, informo la business logic.\"";
	    			println( temporaryStr );  
	    			temporaryStr = QActorUtils.unifyMsgContent(pengine,"robotAnswer(VALUE)","robotAnswer(\"obstacle\")", guardVars ).toString();
	    			sendMsg("robotAnswer","qabusinesslogicproban", QActorContext.dispatch, temporaryStr ); 
	    			};//actionseq
	    	}
	    	//switchTo waitForCommand
	        switchToPlanAsNextState(pr, myselfName, "qasoffrittirobot_"+myselfName, 
	              "waitForCommand",false, false, null); 
	    }catch(Exception e_robotResponse){  
	    	 println( getName() + " plan=robotResponse WARNING:" + e_robotResponse.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//robotResponse
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
