var net       = require('net');
var http      = require("http");
var utils     = require("./utils"); //to handle uncaughtException

var socketToQaCtx = null; 
var msgNum=1;

//Connect to the QActor application
module.exports.connectToQaNode = (host, qaport) => {
	try{
		socketToQaCtx = net.connect({ port: qaport, host: host });
		socketToQaCtx.setEncoding('utf8');	
		console.log('connected to qa node:' + host + ":" + qaport);
		var qaanswer = "";
		console.log("NodeServer SETUP socketToQaCtx ---- ");
		socketToQaCtx.on('data',function(data) {
			qaanswer = qaanswer + data;
			if( qaanswer === "" ) return;
			if( data.includes("\n") ){
				console.log(  "RobotFrontEndServer received from qa: "+qaanswer );
				qaanswer = "";
			}
		});  	  
		socketToQaCtx.on('close',function() {
			console.log('connection is closed');
		});
		socketToQaCtx.on('end',function() {
			console.log('connection is ended');
		});
	}catch(e){ 
		console.log(" ------- connectToQaNode ERROR "  + e + " socketToQaCtx=" + socketToQaCtx); 
	}
}

/*
 * emit an event for the QActor application
 */
 module.exports.emitQaEvent = ( payload ) => {
 	try{
 		var msg = "msg(consoleCmd,event,qaconsoleproban_ctrl,none,consoleCmd(" + payload + ")," + msgNum + ")";
 		if(socketToQaCtx !== null ){
 			console.log('emitQaEvent mmsg=' + msg    ); 
 			socketToQaCtx.write(msg+"\n");
 			msg += 1;
  			//TDOO: wait an qaanswer from the qa before responding to the HTTP user
  		}
  	}catch(e){ 
  		console.log("WARNING: "  + e ); 
  	}
  }

/*
USAGE
node RobotFrontEndServer.js localhost 8071
node RobotFrontEndServer.js 192.168.137.1 8071
or run nodeServerActivator

curl -X PUT -d  item1 http://localhost:8098
*/
 