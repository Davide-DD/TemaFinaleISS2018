System cleaningRobotProg 

Event consoleCmd : consoleCmd( CMD )
Event timeEvent : timeEvent( VALUE ) // VALUE is an integer between 0 and 23
Event tempEvent : tempEvent( VALUE ) // VALUE is measured in Celsius degrees
Event ledEvent : ledEvent( VALUE ) // VALUE is 'blink' or 'off'
Event manageCommandsEvent : manageCommands(SENDER, DATA ) 

Dispatch robotCmd : robotCmd( CMD ) // CMD can be: 'w' to go forward, 's' to go backward, 
								 //'a' to turn left, 'd' to turn right, 
								 // and 'x' to stop
Dispatch robotAnswer : robotAnswer( VALUE ) // VALUE can be 'clear', 'obstacle'

Event thinkingRequest : thinkingRequest(DATA) // DATA = obstacle o clear
Event thought : thought(DATA) // DATA = qualsiasi comando accettabile dal robot
Event finished : finished(DATA) // DATA = motivazione per cui l'algoritmo ha terminato la sua esecuzione = stanza pulita o ostacolo invalicabile

Dispatch consoleMsg : consoleCmd( CMD )
Dispatch timeMsg : timeEvent( VALUE )
Dispatch tempMsg : tempEvent( VALUE )
Event manageCommandsMsg : manageCommands(SENDER, DATA ) 

pubSubServer "tcp://localhost:1883"
	 
Context progCtx ip [ host="localhost"  port=8019 ] -g cyan

EventHandler evhconsole for consoleCmd {
 	forwardEvent qabusinesslogicproban -m consoleMsg  	//from event to message     	
};

EventHandler evhtime for timeEvent {
 	forwardEvent qabusinesslogicproban -m timeMsg  	//from event to message     	
};

EventHandler evhtemp for tempEvent {
 	forwardEvent qabusinesslogicproban -m tempMsg  	//from event to message     	
};

EventHandler evhcommands for manageCommandsEvent {
 	forwardEvent qafrontend -m manageCommandsMsg 	//from event to message     	
};

QActor qafrontendactivator context progCtx {
	Plan init normal [
		println("ACTIVATING CONSOLE SERVER");
		delay 1000;
		// Setting mode to production hides simulator in frontend
		// To make sure it works in debug mode, cityInformation server must not be executed
		nodeOp "./nodeCode/console/bin/www --mode debug --qaPo 8019 --qaAddr localhost --mqttProto tcp --mqttPort 1883 --mqttAddr localhost"
	]
}

QActor qafrontend context progCtx {
	Plan init normal [
	] switchTo waitForCommands
	
	Plan waitForCommands [
	] transition stopAfter 30000000  
     	whenEvent manageCommandsMsg -> handleManageCommandsMsg
    finally repeatPlan
    
    Plan handleManageCommandsMsg resumeLastPlan [
    	onMsg manageCommandsMsg : manageCommands("buslog", DATA ) -> 
    		sendToExternalServer "qaconsoleproban_ctrl" -m DATA
    ]
}

QActor qabusinesslogicproban context progCtx {
	Rules {		
		
		systemmodel( name(application), value(off) ).
		switchSystemState(on) :-
			systemmodel( name(application), value(off) ),
			replaceRule( systemmodel( NAME, value(off) ), systemmodel( NAME, value(on) ) ), !.
		switchSystemState(off) :-
			systemmodel( name(application), value(on) ),
			replaceRule( systemmodel( NAME, value(on) ), systemmodel( NAME, value(off) ) ), !.
		
		eval(ge, X, X).
		eval(ge, X, V) :- eval(gt, X, V).
		
		curTemperatureValue(10).
		curTimeValue(7).
		
		evalTemperature(cold) :-
			curTemperatureValue(V),
			eval(lt, V, 25).
		evalTemperature(hot) :-
			curTemperatureValue(V),
			eval(ge, V, 25), !.
			
		evalTime(good) :-
			curTimeValue(V),
			output(curTimeValue(V)),
			eval(ge, V, 7),
			eval(lt, V, 18), !.		
	} // was 25 temp 11 time
	
	Plan init normal [
		println( qabusinesslogicreqan(starts)  );
		connectAsSubscriber "temperature" ;
		connectAsSubscriber "hour"
		// All'inizio, il robot e' fermo (stopped) e la console pu� quindi solo avviarlo,
		// di conseguenza, l'unico messaggio che potr� arrivare in waitForUserCmd sar� consoleCmd('start')
		// Bisogna quindi disabilitare il comando di stop
	] switchTo waitForFrontendActivation
	
	Plan waitForFrontendActivation[
    	
    	println("Waiting for frontend to be ready")
    ] 
    transition stopAfter 30000000  
     	whenMsg consoleMsg -> handleConsoleReady
    finally repeatPlan
    
    Plan handleConsoleReady [   
     	println('console is ready')
    ] switchTo waitForUserCmd
 
    Plan waitForUserCmd[    	
    	println("Waiting for user commands")
    ] 
    transition stopAfter 30000000  
     	whenMsg consoleMsg -> handleConsoleStartCmd,
     	whenMsg timeMsg -> handleCityMsg,
     	whenMsg tempMsg -> handleCityMsg
    finally repeatPlan
    
    Plan handleConsoleStartCmd [   
     	printCurrentEvent;  
    	onMsg consoleMsg : consoleCmd('start') -> {
    				println("START command received from console");
    				
    				emit manageCommandsEvent : manageCommands("buslog", "disable_start, enable_stop");
    				emit ledEvent : ledEvent('blink');
    				emit thinkingRequest : thinkingRequest('reset')

    				// Adesso, il robot e' in movimento, di conseguenza bisogna abilitare il comando di stop
    				// e disabilitare il comando di start. 
    				// Quindi, nel piano waitForAlgCmd, potr� arrivare solo consoleCmd(stop)
    				
    				
    				}
    ] switchTo waitForAlgCmd
    
    Plan waitForAlgCmd[
    ]
    transition stopAfter 30000000 
        whenMsg consoleMsg -> handleStopOrFinished,
     	whenEvent thought -> handleThought,
     	whenEvent finished -> handleStopOrFinished,
     	whenMsg timeMsg -> handleCityMsg,
     	whenMsg tempMsg -> handleCityMsg
    finally repeatPlan
    
    Plan handleThought [   
     	printCurrentEvent;  
    	onEvent thought : thought(V) -> forward qarobotproban -m robotCmd : robotCmd(V)
    ] switchTo waitForRobotResponse
    
    Plan waitForRobotResponse[  ] 
    transition stopAfter 30000000 
        whenMsg consoleMsg -> handleStopOrFinished,
     	whenMsg robotAnswer -> handleRobotAnswer,
     	whenMsg timeMsg -> handleCityMsg,
     	whenMsg tempMsg -> handleCityMsg
    finally repeatPlan
    
    Plan handleRobotAnswer [   
     	printCurrentMessage;  
    	onMsg robotAnswer : robotAnswer(V) -> /*forward qamindofrobotproban -m*/ emit thinkingRequest : thinkingRequest(V)
    ] switchTo waitForAlgCmd
    
    Plan handleStopOrFinished [ 
    	println("STOP command received from console or triggered from application");
    	emit ledEvent : ledEvent('off');
    	[!? systemmodel( name(application), value(on) )] {
    		emit manageCommandsEvent : manageCommands("buslog", "enable_start, disable_stop")
    	}
    ] switchTo waitForUserCmd
    
    Plan handleCityMsg resumeLastPlan [
    	printCurrentMessage;
    	onMsg timeMsg : timeEvent(V) -> ReplaceRule curTimeValue(X) with curTimeValue(V);
    	onMsg tempMsg : tempEvent(V) -> ReplaceRule curTemperatureValue(X) with curTemperatureValue(V);
    	[!? evalTime(good)] {
    		println("GOOD time range, doing nothing.");
    		[!? evalTemperature(cold)] {
				println("Temperature is nice, doing nothing.");
				[!? switchSystemState(on) ] {
					emit manageCommandsEvent : manageCommands("buslog", "enable_start, disable_stop")
				}
			} else {
				println("Temperature too hot, stopping everything.");
				[!? switchSystemState(off) ] {
					emit manageCommandsEvent : manageCommands("buslog", "disable_all")
				}
			}
		} else {
			println("BAD time range, stopping everything.");
			[!? switchSystemState(off) ] {
				emit manageCommandsEvent : manageCommands("buslog", "disable_all")
			} 
		}
    ] switchTo [!? systemmodel( name(application), value(off) )] handleStopOrFinished
        
}

QActor qamindofrobotproban context progCtx {
	Plan init normal [
		println( qaconsoleproban(starts)  )
	] switchTo waitForThinkingRequest
		
	Plan waitForThinkingRequest [
		// in questo caso, per semplicit�, abbiamo che la mindofrobot emette sempre lo stesso comando,
		// perch� non fa inferenza (la aggiungeremo pi� tardi)
		// In particolare, a un certo punto, l'algoritmo ci restituir� l'evento finish
		// che sar� scatenato se o l'algoritmo termina oppure perch� il robot � di fronte a un ostacolo invalicabile
		println( "MIND: waitForThinkingRequest")
	] transition stopAfter 300000
     	whenEvent thinkingRequest -> handleThinking
    finally repeatPlan
    
    Plan handleThinking resumeLastPlan [
    	println( "MIND: handleThinking");
    	delay 1000 ;
    	emit thought : thought('w');
    	println("MIND: Thought!")
    	
    	// Ad un certo punto potr� essere emesso l'evento finished, quando la destinazione � stata raggiunta
    ]
    
}

QActor qaledproban context progCtx {
	
	Rules {
		ledmodel( name(genericled), value(off) ).
		switchLedValue(on) :-
			ledmodel( name(genericled), value(off) ),
			replaceRule( ledmodel( NAME, value(off) ), ledmodel( NAME, value(on) ) ), !.
		switchLedValue(off) :-
			ledmodel( name(genericled), value(on) ),
			replaceRule( ledmodel( NAME, value(on) ), ledmodel( NAME, value(off) ) ), !.
	}
	
	Plan init normal [
		println( qaledproban(starts)  )
	] switchTo waitForCommand     
  
    Plan waitForCommand[  ]  
    transition stopAfter 100000 
     	whenEvent ledEvent -> handleLed
    finally repeatPlan	
    
    Plan handleLed resumeLastPlan [   
     	//printCurrentEvent;  
    	
    	onEvent ledEvent : ledEvent('blink') -> { 
    		[!? switchLedValue(on)] println("LED: blinking!") };
    				 
    	onEvent ledEvent : ledEvent('off') -> {
    		[!? switchLedValue(off)] println("LED: not blinking...")}
    ]
}

QActor qarobotproban context progCtx {
	Plan init normal [
		println( qarobotproban(starts)  )
	] switchTo waitForCommand     
  
    Plan waitForCommand[  ]  
    transition stopAfter 100000 
     	whenMsg robotCmd -> handleCmd
    
     Plan handleCmd [   
     	println("ROBOT: command received!");
     	//printCurrentMessage;  
    	onMsg robotCmd : robotCmd('w') -> 
    				println("ROBOT: Moving forward!");
    	onMsg robotCmd : robotCmd('s') -> 
    				println("ROBOT: Moving backward!");
    	onMsg robotCmd : robotCmd('a') ->  
    				println("ROBOT: Turning left!");
    	onMsg robotCmd : robotCmd('d') -> 
    				println("ROBOT: Turning right!");
    	onMsg robotCmd : robotCmd('x') -> 
    				println("ROBOT: Stopping!")
    ] switchTo robotResponse
    
    
    Plan robotResponse [
    	println("ROBOT: let's see what's in front of me...");
    	forward qabusinesslogicproban -m robotAnswer : robotAnswer('clear');
    	println("ROBOT: answer sent: clear!")
    ] switchTo waitForCommand
}

QActor qacityinformationproban context progCtx {
	Plan init normal [
		println("ACTIVATING CITY SERVER")
		// Se si eseguono i test, commentare la riga sotto
		// nodeOp "./nodeCode/cityInformation/server.js -c Bologna --pr tcp --a localhost --po 1883 -o"
	]
}