System cleaningRobotAnalisiRequisiti2

Dispatch consoleMsg : consoleMsg( DATA )

Event environmentalEvent : environmentalEvent( REASON )

Context consoleCtx2 ip [ host="localhost"  port=8019 ] -g cyan
Context robotCtx2 ip [ host="localhost"  port=8021 ] -g yellow

QActor qaconsole2 context consoleCtx2 {
	Plan init normal [ 
		println("CONSOLE: acceso");
		delay 1000
		
		// TODO: Prior to execute JUnit tests, comment code lines from here...
		println("CONSOLE: mando start");
		// ASSUNZIONE DA ANALISTA:
		// il comando start viene inviato solo quando le condizioni
		// non sono violate, noi per ipotesi imponiamo che non lo siano
		forward qarobot2 -m consoleMsg : consoleMsg("start")
		// to here
		
	] switchTo putOnHold
	
	Plan putOnHold [] finally repeatPlan
}

QActor qaenvironment context robotCtx2 {
	Plan init normal [
		println("ENVIRONMENT: simulo controllo di tempo e temperatura e invio eventi di interruzione a causa di violazione delle precondizioni");
		delay 5000;
		// TODO: Prior to execute JUnit tests, comment code line below
		emit environmentalEvent : environmentalEvent("bad_temp")
	] switchTo putOnHold
	
	Plan putOnHold [] finally repeatPlan
}

QActor qarobot2 context robotCtx2 {

	Plan init normal [
		println("ROBOT: in attesa di comandi dalla console o eventi di interruzione")
	] switchTo waitForCommands
	
	Plan waitForCommands [
	] transition stopAfter 30000000  
     	whenMsg consoleMsg -> handleConsoleMsg,
     	whenEvent environmentalEvent -> handleEnvironmentalEvent 
    finally repeatPlan
    
    Plan handleConsoleMsg resumeLastPlan [
    	onMsg consoleMsg : consoleMsg("start") -> {
    		addRule rStart;
    		println("ROBOT: acceso da comando console")
    	};
    	onMsg consoleMsg : consoleMsg("stop") -> {
    		addRule rStop;
    		println("ROBOT: spento da comando console")
    	}
    ]
    
    Plan handleEnvironmentalEvent resumeLastPlan [
    	onEvent environmentalEvent : environmentalEvent("bad_temp") -> {
    		addRule rTempKo;
    		println("ROBOT: spento a causa di violazione condizioni di temperatura")
    	};
    	onEvent environmentalEvent : environmentalEvent("bad_time") -> {
    		addRule rTimeKo;
    		println("ROBOT: spento a causa di violazione condizioni di tempo")
    	}
    ]
}