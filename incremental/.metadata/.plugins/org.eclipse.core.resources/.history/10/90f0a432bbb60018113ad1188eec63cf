/* Generated by AN DISI Unibo */ 
package it.unibo.qarobot3;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractQarobot3 extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractQarobot3(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/qarobot3/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/qarobot3/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("waitForCommands",waitForCommands);
	    	stateTab.put("handleConsoleMsg",handleConsoleMsg);
	    	stateTab.put("handleEnvironmentalEvent",handleEnvironmentalEvent);
	    	stateTab.put("handleCollisionEvent",handleCollisionEvent);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "qarobot3 tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	temporaryStr = "\"ROBOT: in attesa di comandi dalla console o eventi di interruzione\"";
	    	println( temporaryStr );  
	    	//switchTo waitForCommands
	        switchToPlanAsNextState(pr, myselfName, "qarobot3_"+myselfName, 
	              "waitForCommands",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun waitForCommands = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_waitForCommands",0);
	     pr.incNumIter(); 	
	    	String myselfName = "waitForCommands";  
	    	//bbb
	     msgTransition( pr,myselfName,"qarobot3_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleConsoleMsg"), stateTab.get("handleEnvironmentalEvent"), stateTab.get("handleCollisionEvent") }, 
	          new String[]{"true","M","consoleMsg", "true","E","environmentalEvent", "true","E","collisionEvent" },
	          30000000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitForCommands){  
	    	 println( getName() + " plan=waitForCommands WARNING:" + e_waitForCommands.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitForCommands
	    
	    StateFun handleConsoleMsg = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleConsoleMsg",-1);
	    	String myselfName = "handleConsoleMsg";  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("consoleMsg(\"start\")");
	    	if( currentMessage != null && currentMessage.msgId().equals("consoleMsg") && 
	    		pengine.unify(curT, Term.createTerm("consoleMsg(DATA)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		//println("WARNING: variable substitution not yet fully implemented " ); 
	    		{//actionseq
	    		temporaryStr = "rStart";
	    		addRule( temporaryStr );  
	    		temporaryStr = "\"ROBOT: acceso da comando console\"";
	    		println( temporaryStr );  
	    		};//actionseq
	    	}
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("consoleMsg(\"stop\")");
	    	if( currentMessage != null && currentMessage.msgId().equals("consoleMsg") && 
	    		pengine.unify(curT, Term.createTerm("consoleMsg(DATA)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		//println("WARNING: variable substitution not yet fully implemented " ); 
	    		{//actionseq
	    		temporaryStr = "rStop";
	    		addRule( temporaryStr );  
	    		temporaryStr = "\"ROBOT: spento da comando console\"";
	    		println( temporaryStr );  
	    		};//actionseq
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"qarobot3_"+myselfName,false,true);
	    }catch(Exception e_handleConsoleMsg){  
	    	 println( getName() + " plan=handleConsoleMsg WARNING:" + e_handleConsoleMsg.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleConsoleMsg
	    
	    StateFun handleEnvironmentalEvent = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleEnvironmentalEvent",-1);
	    	String myselfName = "handleEnvironmentalEvent";  
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("environmentalEvent(\"bad_temp\")");
	    	if( currentEvent != null && currentEvent.getEventId().equals("environmentalEvent") && 
	    		pengine.unify(curT, Term.createTerm("environmentalEvent(REASON)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			//println("WARNING: variable substitution not yet fully implemented " ); 
	    			{//actionseq
	    			temporaryStr = "rTempKo";
	    			addRule( temporaryStr );  
	    			temporaryStr = "\"ROBOT: spento a causa di violazione condizioni di temperatura\"";
	    			println( temporaryStr );  
	    			};//actionseq
	    	}
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("environmentalEvent(\"bad_time\")");
	    	if( currentEvent != null && currentEvent.getEventId().equals("environmentalEvent") && 
	    		pengine.unify(curT, Term.createTerm("environmentalEvent(REASON)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			//println("WARNING: variable substitution not yet fully implemented " ); 
	    			{//actionseq
	    			temporaryStr = "rTimeKo";
	    			addRule( temporaryStr );  
	    			temporaryStr = "\"ROBOT: spento a causa di violazione condizioni di tempo\"";
	    			println( temporaryStr );  
	    			};//actionseq
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"qarobot3_"+myselfName,false,true);
	    }catch(Exception e_handleEnvironmentalEvent){  
	    	 println( getName() + " plan=handleEnvironmentalEvent WARNING:" + e_handleEnvironmentalEvent.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleEnvironmentalEvent
	    
	    StateFun handleCollisionEvent = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleCollisionEvent",-1);
	    	String myselfName = "handleCollisionEvent";  
	    	temporaryStr = "\"ROBOT: collisione rilevata dal sensore, per capire se � mobile aspetto un po', e se non ricevo pi� collisioni allora lo �\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"ROBOT: temporaneamente fermo per collisione\"";
	    	println( temporaryStr );  
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(700,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "handleCollisionEvent";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = "\"ROBOT: riprendo ad andare, dopo la collisione\"";
	    	println( temporaryStr );  
	    	repeatPlanNoTransition(pr,myselfName,"qarobot3_"+myselfName,false,true);
	    }catch(Exception e_handleCollisionEvent){  
	    	 println( getName() + " plan=handleCollisionEvent WARNING:" + e_handleCollisionEvent.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleCollisionEvent
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
